Index: application-admintools-default/src/main/java/com/xwiki/admintools/internal/network/NetworkManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage com.xwiki.admintools.internal.network;\n\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.inject.Inject;\nimport javax.inject.Provider;\nimport javax.inject.Singleton;\nimport javax.ws.rs.core.UriBuilder;\n\nimport org.xwiki.component.annotation.Component;\nimport org.xwiki.component.phase.Initializable;\nimport org.xwiki.component.phase.InitializationException;\nimport org.xwiki.contrib.limits.LimitsConfiguration;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.xpn.xwiki.XWikiContext;\nimport com.xpn.xwiki.web.XWikiRequest;\n\n/**\n * Manages the communication between the application and the XWiki networking server.\n *\n * @version $Id$\n * @since 1.3\n */\n@Component(roles = NetworkManager.class)\n@Singleton\npublic class NetworkManager implements Initializable\n{\n    private static final String COOKIE_ID = \"xnngSessionId\";\n\n    private static final String COOKIE_KEY = \"Cookie\";\n\n    @Inject\n    private Provider<XWikiContext> wikiContextProvider;\n\n    @Inject\n    private LimitsConfiguration limitsConfiguration;\n\n    private String requestDomain;\n\n    private String instanceReference = \"\";\n\n    private long detail;\n\n    @Inject\n    private HttpClientBuilderFactory httpClientBuilderFactory;\n\n    @Override\n    public void initialize() throws InitializationException\n    {\n        XWikiRequest wikiRequest = wikiContextProvider.get().getRequest();\n        String instanceDomain = wikiRequest.getRequestURL().toString().replace(wikiRequest.getRequestURI(), \"\");\n        requestDomain = \"xnng.xwiki.com\";\n        if (instanceDomain.endsWith(\"devxwiki.com\")) {\n            requestDomain = \"xnng-staging.devxwiki.com\";\n        }\n        Map<String, Object> customLimits = limitsConfiguration.getCustomLimits();\n        if (!customLimits.isEmpty()) {\n            instanceReference = customLimits.get(\"instanceReference\").toString();\n            detail = ((Date) customLimits.get(\"expirationDate\")).getTime();\n        }\n    }\n\n    /**\n     * Retrieve JSON data from the given network endpoint.\n     *\n     * @param target the target endpoint.\n     * @param parameters parameters to be sent with the request.\n     * @return the JSON retrieved from the network, or null if the user has no access.\n     * @throws IOException if an I/O error occurs when sending the request or receiving the response.\n     * @throws InterruptedException if the operation is interrupted.\n     */\n    public Map<String, Object> getJSONFromNetwork(String target, Map<String, String> parameters)\n        throws IOException, InterruptedException\n    {\n        HttpClient client = httpClientBuilderFactory.getHttpClient();\n        XWikiContext wikiContext = wikiContextProvider.get();\n        boolean hasSession = wikiContext.getRequest().getSession().getAttribute(COOKIE_ID) != null;\n        boolean hasAccess = hasSession ? checkAccess(client) : tryGetAccess(client);\n\n        return hasAccess ? getJSON(target, parameters, client) : null;\n    }\n\n    /**\n     * Get network limits for the current instance.\n     *\n     * @return A JSON with the instance limits.\n     * @throws IOException if an I/O error occurs when sending the request or receiving the response.\n     * @throws InterruptedException if the operation is interrupted.\n     */\n    public Map<String, Object> getLimits() throws IOException, InterruptedException\n    {\n        HttpClient client = httpClientBuilderFactory.getHttpClient();\n        String targetPath = \"xwiki/rest/instance/limits\";\n        URI uri = getURI(targetPath, Map.of(\"instance\", instanceReference, \"detail\", String.valueOf(detail)));\n        HttpRequest request = HttpRequest.newBuilder().uri(uri).build();\n        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n        if (response.statusCode() == 200) {\n            ObjectMapper objectMapper = new ObjectMapper();\n            return objectMapper.readValue(response.body(), new TypeReference<Map<String, Object>>()\n            {\n            });\n        }\n        return Collections.emptyMap();\n    }\n\n    private boolean checkAccess(HttpClient client) throws IOException, InterruptedException\n    {\n        XWikiContext wikiContext = wikiContextProvider.get();\n        String targetURL =\n            String.format(\"https://%s/xwiki/bin/view/%s\", requestDomain, instanceReference.replace(\".\", \"/\"));\n        HttpRequest request = HttpRequest.newBuilder().uri(URI.create(targetURL))\n            .header(COOKIE_KEY, (String) wikiContext.getRequest().getSession().getAttribute(COOKIE_ID)).build();\n        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n        if (response.statusCode() != 200) {\n            return tryGetAccess(client);\n        }\n        return true;\n    }\n\n    private Map<String, Object> getJSON(String target, Map<String, String> parameters, HttpClient client)\n        throws IOException, InterruptedException\n    {\n        XWikiContext wikiContext = wikiContextProvider.get();\n        URI dataUri = getURI(target, parameters);\n        HttpRequest dataRequest = HttpRequest.newBuilder().uri(dataUri)\n            .header(COOKIE_KEY, (String) wikiContext.getRequest().getSession().getAttribute(COOKIE_ID)).GET().build();\n        HttpResponse<String> response = client.send(dataRequest, HttpResponse.BodyHandlers.ofString());\n        if (response.statusCode() == 200) {\n            ObjectMapper objectMapper = new ObjectMapper();\n            return objectMapper.readValue(response.body(), new TypeReference<Map<String, Object>>()\n            {\n            });\n        }\n        return Collections.emptyMap();\n    }\n\n    private URI getURI(String target, Map<String, String> parameters)\n    {\n        String uri = String.format(\"https://%s/%s\", requestDomain, target);\n        UriBuilder uriBuilder = UriBuilder.fromUri(uri);\n        for (Map.Entry<String, String> entry : parameters.entrySet()) {\n            if (entry.getValue() != null && !entry.getValue().isEmpty() && !entry.getValue().equals(\"-\")) {\n                uriBuilder.queryParam(entry.getKey(), entry.getValue());\n            }\n        }\n        return uriBuilder.build();\n    }\n\n    private boolean tryGetAccess(HttpClient client) throws IOException, InterruptedException\n    {\n        String targetURL =\n            String.format(\"https://%s/xwiki/rest/user/instance/access?instance=%s&detail=%d\", requestDomain,\n                instanceReference, detail);\n        HttpRequest request = HttpRequest.newBuilder().uri(URI.create(targetURL)).build();\n        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n        if (response.statusCode() == 200) {\n            XWikiContext wikiContext = wikiContextProvider.get();\n            List<String> setCookieHeaders = response.headers().map().get(\"set-cookie\");\n            String sessionCookie = \"\";\n            if (setCookieHeaders != null) {\n                for (String cookie : setCookieHeaders) {\n                    if (cookie.startsWith(\"JSESSIONID=\")) {\n                        sessionCookie = cookie.split(\";\", 2)[0];\n                        break;\n                    }\n                }\n            }\n            wikiContext.getRequest().getSession().setAttribute(COOKIE_ID, sessionCookie);\n            return true;\n        }\n        return false;\n    }\n}\n
===================================================================
diff --git a/application-admintools-default/src/main/java/com/xwiki/admintools/internal/network/NetworkManager.java b/application-admintools-default/src/main/java/com/xwiki/admintools/internal/network/NetworkManager.java
--- a/application-admintools-default/src/main/java/com/xwiki/admintools/internal/network/NetworkManager.java	
+++ b/application-admintools-default/src/main/java/com/xwiki/admintools/internal/network/NetworkManager.java	
@@ -79,7 +79,7 @@
         XWikiRequest wikiRequest = wikiContextProvider.get().getRequest();
         String instanceDomain = wikiRequest.getRequestURL().toString().replace(wikiRequest.getRequestURI(), "");
         requestDomain = "xnng.xwiki.com";
-        if (instanceDomain.endsWith("devxwiki.com")) {
+        if (!instanceDomain.endsWith("devxwiki.com")) {
             requestDomain = "xnng-staging.devxwiki.com";
         }
         Map<String, Object> customLimits = limitsConfiguration.getCustomLimits();
@@ -87,6 +87,8 @@
             instanceReference = customLimits.get("instanceReference").toString();
             detail = ((Date) customLimits.get("expirationDate")).getTime();
         }
+        instanceReference = "Accounts.Account_11776.Instances.Instance_1.WebHome";
+        detail = 1773784740000L;
     }
 
     /**
